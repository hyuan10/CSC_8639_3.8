library(ProjectTemplate)
load()
load.project()
setwd("~/CSC_8631_Project/CSC_8631_Analysis")
setwd("~/")
setwd("C:/Users/Harvey")
setwd("~/")
getwd()
source("~/CSC_8631_Project/CSC_8631_Analysis/munge/01-A.R")
source("~/CSC_8631_Project/CSC_8631_Analysis/munge/01-A.R")
getwd()
setwd("~/")
setwd("C:/Users/Harvey")
getwd()
cd(~/)
source("~/CSC_8631_Project/CSC_8631_Analysis/munge/01-A.R")
View(df_Enrolments)
getwd()
cd(~/)
cd(~\)
setwd("~\")
c:/Users/Harvey
qqq
getwd()
setwd("~\")
C:\Users\Harvey\
C:/Users/Harvey/
library(ProjectTemplate)
test <- read.csv("C:\Users\Harvey\Downloads\yellow_tripdata_2021-07.csv", header=TRUE, stringsAsFactors=FALSE)
test <- read.csv("C:\\Users\\Harvey\\Downloads\\yellow_tripdata_2021-07.csv", header=TRUE, stringsAsFactors=FALSE)
test <- read.csv("C:\Users\Harvey\Downloads\yellow_tripdata_2021-07.csv", header=TRUE, stringsAsFactors=FALSE)
View(test)
# Script to set up Project
setwd("~/../CSC_8634/")
# Loads "ProjectTemplate" library and loads the project
library('ProjectTemplate')
load.project()
# Script to set up Project
setwd("~/./CSC_8634/")
# Loads "ProjectTemplate" library and loads the project
library('ProjectTemplate')
load.project()
# Script to set up Project
setwd("~./CSC_8634/")
# Loads "ProjectTemplate" library and loads the project
library('ProjectTemplate')
load.project()
# Script to set up Project
setwd("./CSC_8634/")
# Loads "ProjectTemplate" library and loads the project
library('ProjectTemplate')
load.project()
# Script to set up Project
setwd("./CSC_8634/")
# Loads "ProjectTemplate" library and loads the project
library('ProjectTemplate')
load.project()
# Example preprocessing script.
#Read in data - When data is added to the data files, the code #2 can be used
vle = read.table(file = "C:/Users/Harvey/Documents/Newcastle University/CSC 8633/anonymisedData/vle.csv", sep = ',', header = T)
#vle = read.table(file = "./data/vle.csv", sep = ',', header = T)
student_info = read.table(file = "C:/Users/Harvey/Documents/Newcastle University/CSC 8633/anonymisedData/studentInfo.csv", sep = ',', header = T)
#student_info = read.table(file = "./data/studentInfo.csv", sep = ',', header = T)
library(tidyverse)
library(data.table)
library(ggplot2)
# Counting the number of activities per code module and Presentation
df_activity_count <- vle %>%
count(code_module,code_presentation,activity_type) %>% rename(activity_type_count = n)
# Sum of activities per code module and presentation
df_total_count <- df_activity_count %>%
group_by(code_module, code_presentation) %>%
summarise(activity_type=sum(`activity_type_count`), .groups='drop')
# Total pass fail by code module, presentation and final result
df.1 <- student_info %>%
group_by(code_module, code_presentation) %>%
summarise(Pass = sum(final_result == 'Pass'), .groups = 'drop')
df.2 <- student_info %>%
group_by(code_module, code_presentation) %>%
summarise(Fail = sum(final_result == 'Fail'), .groups = 'drop')
df.3 <- student_info %>%
group_by(code_module, code_presentation) %>%
summarise(Distinction = sum(final_result == 'Distinction'), .groups = 'drop')
df.4 <- student_info %>%
group_by(code_module, code_presentation) %>%
summarise(Withdrawn = sum(final_result == 'Withdrawn'), .groups = 'drop')
#Merging df to create 1
df_merged <- merge(merge(merge(merge(df_total_count, df.1, by = c("code_module", "code_presentation")),
df.2, by = c("code_module", "code_presentation")),
df.3,  by = c("code_module", "code_presentation")),
df.4, by = c("code_module", "code_presentation"))
View(df_merged)
atc <- ggplot(data = df_merged,mapping=aes(x=code_module, y=activity_type, fill = code_presentation))+
geom_bar(stat="identity")+
ggtitle('Sum of activities per module')+
theme_bw()
atc
pass <- ggplot(data = df_merged,mapping=aes(x=code_module, y=Pass, fill = code_presentation))+
geom_bar(stat="identity")+
ggtitle('Sum of students Pass per module')+
theme_bw()
pass
fail <- ggplot(data = df_merged,mapping=aes(x=code_module, y=Fail, fill = code_presentation))+
geom_bar(stat="identity")+
ggtitle('Sum of students Fail per module')+
theme_bw()
fail
dist <- ggplot(data = df_merged,mapping=aes(x=code_module, y=Distinction, fill = code_presentation))+
geom_bar(stat="identity")+
ggtitle('Sum of students Distinction per module')+
theme_bw()
dist
job_title <- c("AI Scientist","Business Data Analyst","Data Analyst")
job_title <- c("AI Scientist","Business Data Analyst","Data Analyst","Data Engineer","Data Science Manager","Data Scientist","Director of Data Science","Lead Data Engineer","Machine Learning Engineer","Machine Learning Infrastructure Engineer","Machine Learning Scientist","Principal Data Scientist","Research Scientist")
2020 Mean <- c(" £45,896.00"," £135,000.00"," £45,547.29"," £88,162.00"," £190,200.00"," £89,185.60"," £325,000.00"," £90,500.00"," £125,389.80"," £50,180.00"," £260,000.00"," £148,261.00"," £246,000.00")
2020_mean <- c(" £45,896.00"," £135,000.00"," £45,547.29"," £88,162.00"," £190,200.00"," £89,185.60"," £325,000.00"," £90,500.00"," £125,389.80"," £50,180.00"," £260,000.00"," £148,261.00"," £246,000.00")
mean_2020 <- c(" £45,896.00"," £135,000.00"," £45,547.29"," £88,162.00"," £190,200.00"," £89,185.60"," £325,000.00"," £90,500.00"," £125,389.80"," £50,180.00"," £260,000.00"," £148,261.00"," £246,000.00")
mean_2021 <- c(" £36,526.50"," £59,102.00"," £83,827.38"," £85,758.00"," £143,126.50"," £70,671.73"," £168,707.80"," £179,720.00"," £74,611.22"," £195,000.00"," £190,000.00"," £194,940.50"," £83,003.60")
mean_2020 <- c(" £160,000.00"," £44,677.00"," £100,550.74"," £127,187.27"," £170,196.60"," £137,136.68"," £196,979.00"," £118,187.00"," £129,451.94"," £58,255.00"," £141,766.67"," £162,674.00"," £105,569.00")
mean_2020 <- c(" £45,896.00"," £135,000.00"," £45,547.29"," £88,162.00"," £190,200.00"," £89,185.60"," £325,000.00"," £90,500.00"," £125,389.80"," £50,180.00"," £260,000.00"," £148,261.00"," £246,000.00")
mean_2022 <- c(" £160,000.00"," £44,677.00"," £100,550.74"," £127,187.27"," £170,196.60"," £137,136.68"," £196,979.00"," £118,187.00"," £129,451.94"," £58,255.00"," £141,766.67"," £162,674.00"," £105,569.00")
Difference_20-21 <- c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26"," -93"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%")
Difference_21/22 <- c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%")
Difference_21>22 <- c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%")
Difference_21_22 <- c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%")
Difference_20_21 <- c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%")
mean_salaries <- data.frame(job_title,mean_2020,mean_2021,mean_2022,Difference_20_21,Difference_21_22)
View(mean_salaries)
mean_2020 <- c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00")
mean_salaries <- data.frame(job_title,mean_2020,mean_2021,mean_2022,Difference_20_21,Difference_21_22)
mean_2021 <- c("36,526.50","59,102.00","83,827.38","85,758.00","143,126.50","70,671.73","168,707.80","179,720.00","74,611.22","195,000.00","190,000.00","194,940.50","83,003.60")
mean_2022 <- c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00")
mean_salaries <- data.frame(job_title,mean_2020,mean_2021,mean_2022,Difference_20_21,Difference_21_22)
ggplot()
ggplot2::hist(mean_salaries
)
View(mean_salaries)
mean_salary <- data.frame(
job_title = c("AI Scientist","Business Data Analyst","Data Analyst"),
mean_2020 = c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00"),
mean_2021 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),
mean_2022 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),
difference_20_21 = c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%"),
difference_21_22 = c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%"))
mean_salary <- data.frame(
job_title = c("AI Scientist","Business Data Analyst","Data Analyst"), mean_2020 = c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00"),mean_2021 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),mean_2022 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),difference_20_21 = c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%"),difference_21_22 = c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%"))
mean_salary <- data.frame(job_title = c("AI Scientist","Business Data Analyst","Data Analyst"), mean_2020 = c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00"),mean_2021 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),mean_2022 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),difference_20_21 = c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%"),difference_21_22 = c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%"))
mean_salary <- data.frame(job_title = c("AI Scientist","Business Data Analyst","Data Analyst","Data Engineer","Data Science Manager","Data Scientist","Director of Data Science","Lead Data Engineer","Machine Learning Engineer","Machine Learning Infrastructure Engineer","Machine Learning Scientist","Principal Data Scientist","Research Scientist"), mean_2020 = c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00"),mean_2021 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),mean_2022 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),difference_20_21 = c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%"),difference_21_22 = c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%"))
View(mean_salary)
mean_salary <- data.frame(job_title = c("AI Scientist","Business Data Analyst","Data Analyst","Data Engineer","Data Science Manager","Data Scientist","Director of Data Science","Lead Data Engineer","Machine Learning Engineer","Machine Learning Infrastructure Engineer","Machine Learning Scientist","Principal Data Scientist","Research Scientist"), mean_2020 = c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00"),mean_2021 = c("36,526.50","59,102.00","83,827.38","85,758.00","143,126.50","70,671.73","168,707.80","179,720.00","74,611.22","195,000.00","190,000.00","194,940.50","83,003.60"),mean_2022 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),difference_20_21 = c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%"),difference_21_22 = c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%"))
knitr::opts_chunk$set(echo = TRUE)
mean_salary <- data.frame(job_title = c("AI Scientist","Business Data Analyst","Data Analyst","Data Engineer","Data Science Manager","Data Scientist","Director of Data Science","Lead Data Engineer","Machine Learning Engineer","Machine Learning Infrastructure Engineer","Machine Learning Scientist","Principal Data Scientist","Research Scientist"), mean_2020 = c("45,896.00","135,000.00","45,547.29","88,162.00","190,200.00","89,185.60","325,000.00","90,500.00","125,389.80","50,180.00","260,000.00","148,261.00","246,000.00"),mean_2021 = c("36,526.50","59,102.00","83,827.38","85,758.00","143,126.50","70,671.73","168,707.80","179,720.00","74,611.22","195,000.00","190,000.00","194,940.50","83,003.60"),mean_2022 = c("160,000.00","44,677.00","100,550.74","127,187.27","170,196.60","137,136.68","196,979.00","118,187.00","129,451.94","58,255.00","141,766.67","162,674.00","105,569.00"),difference_20_21 = c(" -26%"," -128%"," 46%"," -3%"," -33%"," -26%"," -93%"," 50%"," -68%"," 74%"," -37%"," 24%"," -196%"),difference_21_22 = c(" 77%"," -32%"," 17%"," 33%"," 16%"," 48%"," 14%"," -52%"," 42%"," -235%"," -34%"," -20%"," 21%"))
print(mean_salary)
library(tidyverse)
library(kableextra)
install.packages("zoo")
library(zoo)
install.packages("kableExtra")
ggplot() + geom_line(aes(y=job_title, x=))
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
knitr::opts_knit$set(root.dir= normalizePath('..'))
getwd()
knitr::include_graphics("Mean_salary.png",error = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
knitr::opts_knit$set(root.dir= normalizePath('..'))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
knitr::opts_knit$set(root.dir= normalizePath('..'))
getwd()
knitr::include_graphics("Mean_salary.png",error = FALSE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
knitr::include_graphics("Mean_salary.png",error = FALSE)
tinytex::reinstall_tinytex(repository = "illinois")
getwd()
knitr::include_graphics("Mean_salary.png",error = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
knitr::opts_knit$set(root.dir= normalizePath('..'))
knitr::include_graphics("Mean_salary.png",error = FALSE)
knitr::include_graphics("Mean_salary.png",error = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
knitr::opts_knit$set(root.dir= normalizePath('..'))
# Setup script for Project
# Please highlight line 4, 5, 6 & 7 and press "Run" button on top right or press "Source"
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("..")
library(ProjectTemplate)
load.project()
# Load the required libraries
library(ggplot2)
library(RColorBrewer)
library(readr)
# Load the gaze data
waterfall <- read_csv("data/Waterfall/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(waterfall) <- col_names
# Removing NaN from the data
waterfall <- waterfall[complete.cases(waterfall), ]
# Calculate the average gaze point between left and right eyes
waterfall$Average_X <- (waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2
waterfall$Average_Y <- (waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1))
# Print the heatmap
print(heatmap_wf)
# Load the gaze data
sankey <- read_csv("data/Sankey/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(sankey) <- col_names
# Removing NaN from the data
sankey <- sankey[complete.cases(sankey), ]
# Calculate the average gaze point between left and right eyes
sankey$Average_X <- (sankey$`Left Eye X` + sankey$`Right Eye X`) / 2
sankey$Average_Y <- (sankey$`Left Eye Y` + sankey$`Right Eye Y`) / 2
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_sk <- ggplot(sankey, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1))
# Print the heatmap
print(heatmap_sk)
# Load the gaze data
waterfall <- read_csv("data/Waterfall/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(waterfall) <- col_names
# Removing NaN from the data
waterfall <- waterfall[complete.cases(waterfall), ]
# Calculate the average gaze point between left and right eyes
waterfall$Average_X <- (waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2
waterfall$Average_Y <- (waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1))
# Print the heatmap
print(heatmap_wf)
# Load the gaze data
waterfall <- read_csv("data/Waterfall/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(waterfall) <- col_names
# Removing NaN from the data
waterfall <- waterfall[complete.cases(waterfall), ]
# Calculate the average gaze point between left and right eyes
waterfall$Average_X <- (waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2
waterfall$Average_Y <- ((waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1))
# Print the heatmap
print(heatmap_wf)
# Load the gaze data
waterfall <- read_csv("data/Waterfall/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(waterfall) <- col_names
# Removing NaN from the data
waterfall <- waterfall[complete.cases(waterfall), ]
# Calculate the average gaze point between left and right eyes
waterfall$Average_X <- (waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2
waterfall$Average_Y <- ((waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 1))
# Print the heatmap
print(heatmap_wf)
# Load the gaze data
waterfall <- read_csv("data/Waterfall/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(waterfall) <- col_names
# Removing NaN from the data
waterfall <- waterfall[complete.cases(waterfall), ]
# Calculate the average gaze point between left and right eyes
waterfall$Average_X <- (waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2
waterfall$Average_Y <- ((waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_wf)
# Load the gaze data
PNL <- read_csv("data/PNL/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(PNL) <- col_names
# Removing NaN from the data
PNL <- PNL[complete.cases(PNL), ]
# Calculate the average gaze point between left and right eyes
PNL$Average_X <- (PNL$`Left Eye X` + PNL$`Right Eye X`) / 2
PNL$Average_Y <- ((PNL$`Left Eye Y` + PNL$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points
heatmap_PNL <- ggplot(PNL, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_PNL)
# Load the gaze data
sankey <- read_csv("data/Sankey/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(sankey) <- col_names
# Removing NaN from the data
sankey <- sankey[complete.cases(sankey), ]
# Calculate the average gaze point between left and right eyes
sankey$Average_X <- (sankey$`Left Eye X` + sankey$`Right Eye X`) / 2
sankey$Average_Y <- ((sankey$`Left Eye Y` + sankey$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_sk <- ggplot(sankey, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_sk)
# Load the gaze data
PNL <- read_csv("data/PNL/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(PNL) <- col_names
# Removing NaN from the data
PNL <- PNL[complete.cases(PNL), ]
# Calculate the average gaze point between left and right eyes
PNL$Average_X <- (PNL$`Left Eye X` + PNL$`Right Eye X`) / 2
PNL$Average_Y <- ((PNL$`Left Eye Y` + PNL$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points
heatmap_PNL <- ggplot(PNL, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_PNL)
# Print the heatmap
print(heatmap_PNL)
# Print the heatmap
print(heatmap_sk)
# Print the heatmap
print(heatmap_wf)
# Load the gaze data
waterfall <- read_csv("data/Waterfall/gaze_data.csv", col_names = FALSE)
col_names <- c("Left Eye X", "Left Eye Y", "Right Eye X", "Right Eye Y")
colnames(waterfall) <- col_names
# Removing NaN from the data
waterfall <- waterfall[complete.cases(waterfall), ]
# Calculate the average gaze point between left and right eyes
waterfall$Average_X <- (waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2
waterfall$Average_Y <- ((waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_wf)
# Calculate the average gaze point between left and right eyes
waterfall1$Average_X <- ((waterfall1$`Left Eye X` + waterfall1$`Right Eye X`) / 2)*(21/9)
################################################################################
# Calculate the average gaze point between left and right eyes
waterfall1$Average_X <- ((waterfall$`Left Eye X` + waterfall1$`Right Eye X`) / 2)*(21/9)
# Calculate the average gaze point between left and right eyes
waterfall1$Average_X <- ((waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2)*(21/9)
################################################################################
# Calculate the average gaze point between left and right eyes
waterfall1$Average_X1 <- ((waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2)*(21/9)
################################################################################
# Calculate the average gaze point between left and right eyes
waterfall$Average_X1 <- ((waterfall$`Left Eye X` + waterfall$`Right Eye X`) / 2)*(21/9)
waterfall$Average_Y1 <- ((waterfall$`Left Eye Y` + waterfall$`Right Eye Y`) / 2)*-1
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf1 <- ggplot(waterfall, aes(x = Average_X, y = Average_Y)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_wf1)
View(waterfall)
# Print the heatmap
print(heatmap_wf1)
# Create the heatmap for the average gaze points with smaller circles (h = 0.02) and without labels, grid, and legend
heatmap_wf1 <- ggplot(waterfall, aes(x = Average_X1, y = Average_Y1)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", h = 0.03) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "YlOrRd")) +
theme_minimal() +
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 2)) +
scale_y_continuous(limits = c(-1, 0))
# Print the heatmap
print(heatmap_wf1)
